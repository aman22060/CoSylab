{
  "version": 3,
  "sources": ["../../popper.js/src/utils/isFunction.js", "../../popper.js/src/utils/getStyleComputedProperty.js", "../../popper.js/src/utils/getParentNode.js", "../../popper.js/src/utils/getScrollParent.js", "../../popper.js/src/utils/getReferenceNode.js", "../../popper.js/src/utils/isIE.js", "../../popper.js/src/utils/getOffsetParent.js", "../../popper.js/src/utils/isOffsetContainer.js", "../../popper.js/src/utils/getRoot.js", "../../popper.js/src/utils/findCommonOffsetParent.js", "../../popper.js/src/utils/getScroll.js", "../../popper.js/src/utils/includeScroll.js", "../../popper.js/src/utils/getBordersSize.js", "../../popper.js/src/utils/getWindowSizes.js", "../../popper.js/src/utils/getClientRect.js", "../../popper.js/src/utils/getBoundingClientRect.js", "../../popper.js/src/utils/getOffsetRectRelativeToArbitraryNode.js", "../../popper.js/src/utils/getViewportOffsetRectRelativeToArtbitraryNode.js", "../../popper.js/src/utils/isFixed.js", "../../popper.js/src/utils/getFixedPositionOffsetParent.js", "../../popper.js/src/utils/getBoundaries.js", "../../popper.js/src/utils/computeAutoPlacement.js", "../../popper.js/src/utils/getReferenceOffsets.js", "../../popper.js/src/utils/getOuterSizes.js", "../../popper.js/src/utils/getOppositePlacement.js", "../../popper.js/src/utils/getPopperOffsets.js", "../../popper.js/src/utils/find.js", "../../popper.js/src/utils/findIndex.js", "../../popper.js/src/utils/runModifiers.js", "../../popper.js/src/methods/update.js", "../../popper.js/src/utils/isModifierEnabled.js", "../../popper.js/src/utils/getSupportedPropertyName.js", "../../popper.js/src/methods/destroy.js", "../../popper.js/src/utils/getWindow.js", "../../popper.js/src/utils/setupEventListeners.js", "../../popper.js/src/methods/enableEventListeners.js", "../../popper.js/src/utils/removeEventListeners.js", "../../popper.js/src/methods/disableEventListeners.js", "../../popper.js/src/utils/isNumeric.js", "../../popper.js/src/utils/setStyles.js", "../../popper.js/src/utils/setAttributes.js", "../../popper.js/src/utils/getRoundedOffsets.js", "../../popper.js/src/utils/isModifierRequired.js", "../../popper.js/src/utils/getOppositeVariation.js", "../../popper.js/src/utils/clockwise.js", "../../popper.js/src/modifiers/offset.js", "../../popper.js/src/modifiers/arrow.js", "../../popper.js/src/utils/isBrowser.js", "../../popper.js/src/utils/debounce.js", "../../popper.js/src/modifiers/computeStyle.js", "../../popper.js/src/modifiers/flip.js", "../../popper.js/src/index.js", "../../popper.js/src/methods/defaults.js", "../../popper.js/src/modifiers/index.js", "../../popper.js/src/modifiers/shift.js", "../../popper.js/src/modifiers/preventOverflow.js", "../../popper.js/src/modifiers/keepTogether.js", "../../popper.js/src/modifiers/inner.js", "../../popper.js/src/modifiers/hide.js", "../../popper.js/src/modifiers/applyStyle.js"],
  "sourcesContent": ["/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n", "/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nexport default function getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const window = element.ownerDocument.defaultView;\n  const css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n", "/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nexport default function getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nexport default function getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body\n    case '#document':\n      return element.body\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n", "/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nexport default function getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n", "import isBrowser from './isBrowser';\n\nconst isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nconst isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nexport default function isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nexport default function getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  const noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  let offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (\n    ['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&\n    getStyleComputedProperty(offsetParent, 'position') === 'static'\n  ) {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n", "import getOffsetParent from './getOffsetParent';\n\nexport default function isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return (\n    nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element\n  );\n}\n", "/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nexport default function getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n", "import isOffsetContainer from './isOffsetContainer';\nimport getRoot from './getRoot';\nimport getOffsetParent from './getOffsetParent';\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nexport default function findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (\n    (element1 !== commonAncestorContainer &&\n      element2 !== commonAncestorContainer) ||\n    start.contains(end)\n  ) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n", "/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nexport default function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n", "import getScroll from './getScroll';\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nexport default function includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n", "/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nexport default function getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return (\n    parseFloat(styles[`border${sideA}Width`]) +\n    parseFloat(styles[`border${sideB}Width`])\n  );\n}\n", "import isIE from './isIE';\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(\n    body[`offset${axis}`],\n    body[`scroll${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    html[`scroll${axis}`],\n    isIE(10)\n      ? (parseInt(html[`offset${axis}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]))\n    : 0 \n  );\n}\n\nexport default function getWindowSizes(document) {\n  const body = document.body;\n  const html = document.documentElement;\n  const computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n", "/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nexport default function getClientRect(offsets) {\n  return {\n    ...offsets,\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height,\n  };\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes from './getWindowSizes';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\nimport isIE from './isIE';\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    }\n    else {\n      rect = element.getBoundingClientRect();\n    }\n  }\n  catch(e){}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  const width =\n    sizes.width || element.clientWidth || result.width;\n  const height =\n    sizes.height || element.clientHeight || result.height;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport includeScroll from './includeScroll';\nimport getScrollParent from './getScrollParent';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport runIsIE from './isIE';\nimport getClientRect from './getClientRect';\n\nexport default function getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n  const isIE10 = runIsIE(10);\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n\n  const styles = getStyleComputedProperty(parent);\n  const borderTopWidth = parseFloat(styles.borderTopWidth);\n  const borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if(fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height,\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    const marginTop = parseFloat(styles.marginTop);\n    const marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (\n    isIE10 && !fixedPosition\n      ? parent.contains(scrollParent)\n      : parent === scrollParent && scrollParent.nodeName !== 'BODY'\n  ) {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n", "import getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\n\nexport default function getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n  const html = element.ownerDocument.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = !excludeScroll ? getScroll(html) : 0;\n  const scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height,\n  };\n\n  return getClientRect(offset);\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nexport default function isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  const parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nexport default function getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n   if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  let el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n\n}\n", "import getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport getReferenceNode from './getReferenceNode';\nimport findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getViewportOffsetRectRelativeToArtbitraryNode from './getViewportOffsetRectRelativeToArtbitraryNode';\nimport getWindowSizes from './getWindowSizes';\nimport isFixed from './isFixed';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nexport default function getBoundaries(\n  popper,\n  reference,\n  padding,\n  boundariesElement,\n  fixedPosition = false\n) {\n  // NOTE: 1 DOM access here\n\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport' ) {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  }\n\n  else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(\n      boundariesNode,\n      offsetParent,\n      fixedPosition\n    );\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes(popper.ownerDocument);\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  const isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0; \n  boundaries.top += isPaddingNumber ? padding : padding.top || 0; \n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0; \n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0; \n\n  return boundaries;\n}\n", "import getBoundaries from '../utils/getBoundaries';\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeAutoPlacement(\n  placement,\n  refRect,\n  popper,\n  reference,\n  boundariesElement,\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(\n    popper,\n    reference,\n    padding,\n    boundariesElement\n  );\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top,\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height,\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom,\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height,\n    },\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map(key => ({\n      key,\n      ...rects[key],\n      area: getArea(rects[key]),\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(\n    ({ width, height }) =>\n      width >= popper.clientWidth && height >= popper.clientHeight\n  );\n\n  const computedPlacement = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n", "import findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\nimport getReferenceNode from './getReferenceNode';\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nexport default function getReferenceOffsets(state, popper, reference, fixedPosition = null) {\n  const commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n", "/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nexport default function getOuterSizes(element) {\n  const window = element.ownerDocument.defaultView;\n  const styles = window.getComputedStyle(element);\n  const x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  const y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x,\n  };\n  return result;\n}\n", "/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nexport default function getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n", "import getOuterSizes from './getOuterSizes';\nimport getOppositePlacement from './getOppositePlacement';\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nexport default function getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height,\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] =\n    referenceOffsets[mainSide] +\n    referenceOffsets[measurement] / 2 -\n    popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] =\n      referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] =\n      referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n", "/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n", "import find from './find';\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n", "import isFunction from './isFunction';\nimport findIndex from './findIndex';\nimport getClientRect from '../utils/getClientRect';\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nexport default function runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined\n    ? modifiers\n    : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier['function']) { // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n", "import computeAutoPlacement from '../utils/computeAutoPlacement';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nexport default function update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {},\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(\n    this.state,\n    this.popper,\n    this.reference,\n    this.options.positionFixed\n  );\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(\n    this.options.placement,\n    data.offsets.reference,\n    this.popper,\n    this.reference,\n    this.options.modifiers.flip.boundariesElement,\n    this.options.modifiers.flip.padding\n  );\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(\n    this.popper,\n    data.offsets.reference,\n    data.placement\n  );\n\n  data.offsets.popper.position = this.options.positionFixed\n    ? 'fixed'\n    : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n", "/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nexport default function isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(\n    ({ name, enabled }) => enabled && name === modifierName\n  );\n}\n", "/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nexport default function getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n", "import isModifierEnabled from '../utils/isModifierEnabled';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nexport default function destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n", "/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nexport default function getWindow(element) {\n  const ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n", "import getScrollParent from './getScrollParent';\nimport getWindow from './getWindow';\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(\n      getScrollParent(target.parentNode),\n      event,\n      callback,\n      scrollParents\n    );\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function setupEventListeners(\n  reference,\n  options,\n  state,\n  updateBound\n) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(\n    scrollElement,\n    'scroll',\n    state.updateBound,\n    state.scrollParents\n  );\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n", "import setupEventListeners from '../utils/setupEventListeners';\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nexport default function enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(\n      this.reference,\n      this.options,\n      this.state,\n      this.scheduleUpdate\n    );\n  }\n}\n", "import getWindow from './getWindow';\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n", "import removeEventListeners from '../utils/removeEventListeners';\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nexport default function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n", "/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nexport default function isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n", "import isNumeric from './isNumeric';\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (\n      ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !==\n        -1 &&\n      isNumeric(styles[prop])\n    ) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n", "/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function(prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n", "/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nexport default function getRoundedOffsets(data, shouldRound) {\n  const { popper, reference } = data.offsets;\n  const { round, floor } = Math;\n  const noRound = v => v;\n  \n  const referenceWidth = round(reference.width);\n  const popperWidth = round(popper.width);\n  \n  const isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  const isVariation = data.placement.indexOf('-') !== -1;\n  const sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  const bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  const horizontalToInteger = !shouldRound\n    ? noRound\n    : isVertical || isVariation || sameWidthParity\n    ? round\n    : floor;\n  const verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(\n      bothOddWidth && !isVariation && shouldRound\n        ? popper.left - 1\n        : popper.left\n    ),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right),\n  };\n}\n", "import find from './find';\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nexport default function isModifierRequired(\n  modifiers,\n  requestingName,\n  requestedName\n) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired =\n    !!requesting &&\n    modifiers.some(modifier => {\n      return (\n        modifier.name === requestedName &&\n        modifier.enabled &&\n        modifier.order < requesting.order\n      );\n    });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(\n      `${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`\n    );\n  }\n  return isRequired;\n}\n", "/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nexport default function getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n", "import placements from '../methods/placements';\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nexport default function clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements\n    .slice(index + 1)\n    .concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n", "import isNumeric from '../utils/isNumeric';\nimport getClientRect from '../utils/getClientRect';\nimport find from '../utils/find';\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nexport function toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(\n        document.documentElement.clientHeight,\n        window.innerHeight || 0\n      );\n    } else {\n      size = Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      );\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nexport function parseOffset(\n  offset,\n  popperOffsets,\n  referenceOffsets,\n  basePlacement\n) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(\n    find(fragments, frag => frag.search(/,|\\s/) !== -1)\n  );\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn(\n      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'\n    );\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1\n    ? [\n        fragments\n          .slice(0, divider)\n          .concat([fragments[divider].split(splitRegex)[0]]),\n        [fragments[divider].split(splitRegex)[1]].concat(\n          fragments.slice(divider + 1)\n        ),\n      ]\n    : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight)\n      ? 'height'\n      : 'width';\n    let mergeWithPrevious = false;\n    return (\n      op\n        // This aggregates any `+` or `-` sign that aren't considered operators\n        // e.g.: 10 + +5 => [10, +, +5]\n        .reduce((a, b) => {\n          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n            a[a.length - 1] = b;\n            mergeWithPrevious = true;\n            return a;\n          } else if (mergeWithPrevious) {\n            a[a.length - 1] += b;\n            mergeWithPrevious = false;\n            return a;\n          } else {\n            return a.concat(b);\n          }\n        }, [])\n        // Here we convert the string values into number values (in px)\n        .map(str => toValue(str, measurement, popperOffsets, referenceOffsets))\n    );\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nexport default function offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n", "import getClientRect from '../utils/getClientRect';\nimport getOuterSizes from '../utils/getOuterSizes';\nimport isModifierRequired from '../utils/isModifierRequired';\nimport getStyleComputedProperty from '../utils/getStyleComputedProperty';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\n        'WARNING: `arrow.element` must be child of its popper element!'\n      );\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\n  const side = sideCapitalized.toLowerCase();\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -=\n      popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] +=\n      reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  const css = getStyleComputedProperty(data.instance.popper);\n  const popperMarginSide = parseFloat(css[`margin${sideCapitalized}`]);\n  const popperBorderSide = parseFloat(css[`border${sideCapitalized}Width`]);\n  let sideValue =\n    center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {\n    [side]: Math.round(sideValue),\n    [altSide]: '', // make sure to unset any eventual altSide value from the DOM node\n  };\n\n  return data;\n}\n", "export default typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n", "import isBrowser from './isBrowser';\n\nconst timeoutDuration = (function(){\n  const longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}());\n\nexport function microtaskDebounce(fn) {\n  let called = false\n  return () => {\n    if (called) {\n      return\n    }\n    called = true\n    window.Promise.resolve().then(() => {\n      called = false\n      fn()\n    })\n  }\n}\n\nexport function taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nconst supportsMicroTasks = isBrowser && window.Promise\n\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nexport default (supportsMicroTasks\n  ? microtaskDebounce\n  : taskDebounce);\n", "import getSupportedPropertyName from '../utils/getSupportedPropertyName';\nimport find from '../utils/find';\nimport getOffsetParent from '../utils/getOffsetParent';\nimport getBoundingClientRect from '../utils/getBoundingClientRect';\nimport getRoundedOffsets from '../utils/getRoundedOffsets';\nimport isBrowser from '../utils/isBrowser';\n\nconst isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'applyStyle'\n  ).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\n      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'\n    );\n  }\n  const gpuAcceleration =\n    legacyGpuAccelerationOption !== undefined\n      ? legacyGpuAccelerationOption\n      : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position,\n  };\n\n  const offsets = getRoundedOffsets(\n    data,\n    window.devicePixelRatio < 2 || !isFirefox\n  );\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement,\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = { ...attributes, ...data.attributes };\n  data.styles = { ...styles, ...data.styles };\n  data.arrowStyles = { ...data.offsets.arrow, ...data.arrowStyles };\n\n  return data;\n}\n", "import getOppositePlacement from '../utils/getOppositePlacement';\nimport getOppositeVariation from '../utils/getOppositeVariation';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\nimport getBoundaries from '../utils/getBoundaries';\nimport isModifierEnabled from '../utils/isModifierEnabled';\nimport clockwise from '../utils/clockwise';\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise',\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    options.boundariesElement,\n    data.positionFixed\n  );\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef =\n      (placement === 'left' &&\n        floor(popperOffsets.right) > floor(refOffsets.left)) ||\n      (placement === 'right' &&\n        floor(popperOffsets.left) < floor(refOffsets.right)) ||\n      (placement === 'top' &&\n        floor(popperOffsets.bottom) > floor(refOffsets.top)) ||\n      (placement === 'bottom' &&\n        floor(popperOffsets.top) < floor(refOffsets.bottom));\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom =\n      floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries =\n      (placement === 'left' && overflowsLeft) ||\n      (placement === 'right' && overflowsRight) ||\n      (placement === 'top' && overflowsTop) ||\n      (placement === 'bottom' && overflowsBottom);\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    const flippedVariationByRef =\n      !!options.flipVariations &&\n      ((isVertical && variation === 'start' && overflowsLeft) ||\n        (isVertical && variation === 'end' && overflowsRight) ||\n        (!isVertical && variation === 'start' && overflowsTop) ||\n        (!isVertical && variation === 'end' && overflowsBottom));\n\n    // flips variation if popper content overflows boundaries\n    const flippedVariationByContent =\n      !!options.flipVariationsByContent &&\n      ((isVertical && variation === 'start' && overflowsRight) ||\n        (isVertical && variation === 'end' && overflowsLeft) ||\n        (!isVertical && variation === 'start' && overflowsBottom) ||\n        (!isVertical && variation === 'end' && overflowsTop));\n\n    const flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = {\n        ...data.offsets.popper,\n        ...getPopperOffsets(\n          data.instance.popper,\n          data.offsets.reference,\n          data.placement\n        ),\n      };\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n", "// Utils\nimport debounce from './utils/debounce';\nimport isFunction from './utils/isFunction';\n\n// Methods\nimport update from './methods/update';\nimport destroy from './methods/destroy';\nimport enableEventListeners from './methods/enableEventListeners';\nimport disableEventListeners from './methods/disableEventListeners';\nimport Defaults from './methods/defaults';\nimport placements from './methods/placements';\n\nexport default class Popper {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = { ...Popper.Defaults, ...options };\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: [],\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys({\n      ...Popper.Defaults.modifiers,\n      ...options.modifiers,\n    }).forEach(name => {\n      this.options.modifiers[name] = {\n        // If it's a built-in modifier, use it as base\n        ...(Popper.Defaults.modifiers[name] || {}),\n        // If there are custom options, override and merge with default ones\n        ...(options.modifiers ? options.modifiers[name] : {}),\n      };\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers)\n      .map(name => ({\n        name,\n        ...this.options.modifiers[name],\n      }))\n      // sort the modifiers by order\n      .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(\n          this.reference,\n          this.popper,\n          this.options,\n          modifierOptions,\n          this.state\n        );\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedules an update. It will run on the next UI update available.\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n  scheduleUpdate = () => requestAnimationFrame(this.update);\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n  static Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n\n  static placements = placements;\n\n  static Defaults = Defaults;\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n", "import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n", "import applyStyle, { applyStyleOnLoad } from './applyStyle';\nimport computeStyle from './computeStyle';\nimport arrow from './arrow';\nimport flip from './flip';\nimport keepTogether from './keepTogether';\nimport offset from './offset';\nimport preventOverflow from './preventOverflow';\nimport shift from './shift';\nimport hide from './hide';\nimport inner from './inner';\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nexport default {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift,\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0,\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent',\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether,\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]',\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false,\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner,\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide,\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right',\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined,\n  },\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n", "/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement],\n      },\n    };\n\n    data.offsets.popper = { ...popper, ...shiftOffsets[shiftvariation] };\n  }\n\n  return data;\n}\n", "import getOffsetParent from '../utils/getOffsetParent';\nimport getBoundaries from '../utils/getBoundaries';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function preventOverflow(data, options) {\n  let boundariesElement =\n    options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  const transformProp = getSupportedPropertyName('transform');\n  const popperStyles = data.instance.popper.style; // assignment to help minification\n  const { top, left, [transformProp]: transform } = popperStyles;\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    boundariesElement,\n    data.positionFixed\n  );\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (\n        popper[placement] < boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (\n        popper[placement] > boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.min(\n          popper[mainSide],\n          boundaries[placement] -\n            (placement === 'right' ? popper.width : popper.height)\n        );\n      }\n      return { [mainSide]: value };\n    },\n  };\n\n  order.forEach(placement => {\n    const side =\n      ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = { ...popper, ...check[side](placement) };\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n", "/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] =\n      floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n", "import getClientRect from '../utils/getClientRect';\nimport getOppositePlacement from '../utils/getOppositePlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] =\n    reference[basePlacement] -\n    (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n", "import isModifierRequired from '../utils/isModifierRequired';\nimport find from '../utils/find';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'preventOverflow'\n  ).boundaries;\n\n  if (\n    refRect.bottom < bound.top ||\n    refRect.left > bound.right ||\n    refRect.top > bound.bottom ||\n    refRect.right < bound.left\n  ) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n", "import setStyles from '../utils/setStyles';\nimport setAttributes from '../utils/setAttributes';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nexport default function applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nexport function applyStyleOnLoad(\n  reference,\n  popper,\n  options,\n  modifierOptions,\n  state\n) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(\n    options.placement,\n    referenceOffsets,\n    popper,\n    reference,\n    options.modifiers.flip.boundariesElement,\n    options.modifiers.flip.padding\n  );\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n"],
  "mappings": "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",
  "names": ["e", "functionToCheck", "getType", "toString", "call", "t", "element", "nodeType", "window", "ownerDocument", "defaultView", "css", "getComputedStyle", "property", "nodeName", "parentNode", "host", "document", "body", "getStyleComputedProperty", "overflow", "overflowX", "overflowY", "test", "getScrollParent", "getParentNode", "reference", "referenceNode", "version", "isIE11", "documentElement", "noOffsetParent", "isIE", "offsetParent", "nextElementSibling", "n", "i", "indexOf", "getOffsetParent", "firstElementChild", "node", "getRoot", "element1", "element2", "order", "compareDocumentPosition", "Node", "DOCUMENT_POSITION_FOLLOWING", "start", "end", "range", "createRange", "setStart", "r", "setEnd", "commonAncestorContainer", "contains", "isOffsetContainer", "element1root", "findCommonOffsetParent", "side", "upperSide", "html", "scrollingElement", "subtract", "scrollTop", "getScroll", "scrollLeft", "modifier", "top", "bottom", "left", "right", "sideA", "axis", "sideB", "parseFloat", "styles", "Math", "parseInt", "computedStyle", "getSize", "offsets", "width", "height", "rect", "o", "getBoundingClientRect", "result", "sizes", "getWindowSizes", "clientWidth", "clientHeight", "horizScrollbar", "offsetWidth", "vertScrollbar", "offsetHeight", "getBordersSize", "h", "p", "getClientRect", "fixedPosition", "isIE10", "runIsIE", "isHTML", "parent", "childrenRect", "parentRect", "scrollParent", "borderTopWidth", "borderLeftWidth", "a", "marginTop", "b", "marginLeft", "s", "includeScroll", "excludeScroll", "relativeOffset", "getOffsetRectRelativeToArbitraryNode", "innerWidth", "innerHeight", "offset", "isFixed", "parentElement", "el", "boundaries", "getFixedPositionOffsetParent", "getReferenceNode", "boundariesElement", "getViewportOffsetRectRelativeToArtbitraryNode", "boundariesNode", "f", "popper", "d", "m", "padding", "isPaddingNumber", "placement", "getBoundaries", "rects", "refRect", "sortedAreas", "Object", "keys", "map", "getArea", "sort", "area", "filteredAreas", "filter", "computedPlacement", "length", "key", "variation", "split", "commonOffsetParent", "x", "marginBottom", "y", "marginRight", "hash", "replace", "popperRect", "getOuterSizes", "popperOffsets", "isHoriz", "mainSide", "secondarySide", "measurement", "secondaryMeasurement", "referenceOffsets", "getOppositePlacement", "Array", "prototype", "find", "arr", "findIndex", "cur", "match", "obj", "modifiersToRun", "ends", "modifiers", "slice", "forEach", "warn", "fn", "enabled", "isFunction", "data", "state", "isDestroyed", "getReferenceOffsets", "options", "positionFixed", "computeAutoPlacement", "flip", "originalPlacement", "getPopperOffsets", "position", "runModifiers", "isCreated", "onUpdate", "onCreate", "some", "name", "prefixes", "upperProp", "charAt", "toUpperCase", "prefix", "toCheck", "style", "isModifierEnabled", "removeAttribute", "willChange", "getSupportedPropertyName", "disableEventListeners", "removeOnDestroy", "removeChild", "isBody", "target", "addEventListener", "passive", "push", "updateBound", "scrollElement", "scrollParents", "eventsEnabled", "setupEventListeners", "scheduleUpdate", "removeEventListener", "removeEventListeners", "isNaN", "isFinite", "unit", "isNumeric", "value", "attributes", "setAttribute", "round", "noRound", "referenceWidth", "popperWidth", "isVertical", "isVariation", "horizontalToInteger", "verticalToInteger", "l", "bothOddWidth", "requesting", "isRequired", "requested", "counter", "index", "validPlacements", "concat", "reverse", "str", "size", "useHeight", "fragments", "frag", "trim", "divider", "search", "splitRegex", "ops", "mergeWithPrevious", "op", "reduce", "toValue", "index2", "basePlacement", "parseOffset", "min", "floor", "max", "navigator", "longerTimeoutBrowsers", "isBrowser", "userAgent", "supportsMicroTasks", "Promise", "called", "resolve", "then", "scheduled", "MSInputMethodContext", "documentMode", "isFirefox", "placements", "BEHAVIORS", "Popper", "requestAnimationFrame", "update", "debounce", "bind", "Defaults", "jquery", "modifierOptions", "onLoad", "enableEventListeners", "destroy", "Utils", "global", "PopperUtils", "shiftvariation", "shiftOffsets", "instance", "transformProp", "popperStyles", "transform", "priority", "check", "escapeWithReference", "opSide", "isModifierRequired", "arrowElement", "querySelector", "len", "sideCapitalized", "toLowerCase", "altSide", "arrowElementSize", "center", "popperMarginSide", "popperBorderSide", "sideValue", "arrow", "flipped", "placementOpposite", "flipOrder", "behavior", "FLIP", "CLOCKWISE", "clockwise", "COUNTERCLOCKWISE", "refOffsets", "overlapsRef", "overflowsLeft", "overflowsRight", "overflowsTop", "overflowsBottom", "overflowsBoundaries", "flippedVariationByRef", "flipVariations", "w", "g", "u", "flippedVariationByContent", "flipVariationsByContent", "flippedVariation", "v", "getOppositeVariation", "subtractLength", "bound", "hide", "legacyGpuAccelerationOption", "gpuAcceleration", "offsetParentRect", "getRoundedOffsets", "devicePixelRatio", "prefixedProperty", "invertTop", "invertLeft", "c", "arrowStyles"]
}
